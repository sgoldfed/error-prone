package com.google.errorprone.bugpatterns;

import static com.google.errorprone.BugPattern.Category.GUICE;
import static com.google.errorprone.BugPattern.MaturityLevel.EXPERIMENTAL;
import static com.google.errorprone.BugPattern.SeverityLevel.ERROR;
import static com.google.errorprone.matchers.Matchers.hasAnnotation;


import com.google.errorprone.BugPattern;
import com.google.errorprone.VisitorState;
import com.google.errorprone.matchers.DescribingMatcher;
import com.google.errorprone.matchers.Description;
import com.google.errorprone.matchers.Matcher;
import com.google.errorprone.matchers.Matchers;
import com.google.errorprone.util.ASTHelpers;

import com.sun.source.tree.ClassTree;
import com.sun.source.tree.MethodTree;
import com.sun.source.tree.Tree;

/**
 * TODO: Insert description here. (generated by sgoldfeder)
 */
@BugPattern(name = "GuiceMoreThanOneInjectableConstructor",
summary = "A class may not have more than one injectable constructor.",
explanation ="",
category = GUICE, severity = ERROR, maturity = EXPERIMENTAL)
public class GuiceMoreThanOneInjectableConstructor extends DescribingMatcher<ClassTree>  {
  
  private static final String GUICE_INJECT_ANNOTATION = "com.google.inject.Inject";
  private static final String JAVAX_INJECT_ANNOTATION = "javax.inject.Inject";
  
  @SuppressWarnings("unchecked")
  Matcher<MethodTree> injectOnConstructorMatcher = Matchers.<MethodTree>anyOf(hasAnnotation(GUICE_INJECT_ANNOTATION),
      hasAnnotation(JAVAX_INJECT_ANNOTATION));

  
  
  /**
   * Matches if any constructor of a class is annotated with an @Inject annotation.

  
  
  
  /* (non-Javadoc)
   * @see com.google.errorprone.matchers.Matcher#matches(java.lang.Object, com.google.errorprone.VisitorState)
   */
  @Override
  public boolean matches(ClassTree classTree, VisitorState state) {
    int numberOfMatches = 0;
    // Iterate over members of class (methods and fields).
    for (Tree member : classTree.getMembers()) {
      // If this member is a constructor...
      if (member instanceof MethodTree && ASTHelpers.getSymbol(member).isConstructor() &&
      injectOnConstructorMatcher.matches((MethodTree) member, state)){
        numberOfMatches++;
      }
    }
    if(numberOfMatches > 1){
      return true;
    }
    return false;
  }

  /* (non-Javadoc)
   * @see com.google.errorprone.matchers.DescribingMatcher#describe(com.sun.source.tree.Tree, com.google.errorprone.VisitorState)
   */
  @Override
  public Description describe(ClassTree t, VisitorState state) {
    // TODO(sgoldfeder): Auto-generated method stub
    return null;
  }

}
